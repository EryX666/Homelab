cluster: "local"

argo-cd:
  fullnameOverride: argocd
  installCRDs: true

  global:
    image:
      repository: quay.io/argoproj/argocd
      tag: ""
    argocdServerPassword: "$2a$10$yepqP4roumwTgR34fd5iteOO7oYGqjy5WhYIP0QCXKiXPiDldBXmW"

  controller:
    replicas: 3
    enableStatefulSet: true
    env:
      - name: ARGOCD_CONTROLLER_REPLICAS
        value: "3"
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-application-controller
            topologyKey: kubernetes.io/hostname
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
      rules:
        enabled: true
        spec:
          - alert: ArgoAppMissing
            expr: |
              absent(argocd_app_info)
            for: 15m
            labels:
              severity: critical
            annotations:
              summary: "[ArgoCD] No reported applications"
              description: >
                ArgoCD has not reported any applications data for the past 15 minutes which
                means that it must be down or not functioning properly.  This needs to be
                resolved for this cloud to continue to maintain state.
          - alert: ArgoAppNotSynced
            expr: |
              argocd_app_info{sync_status!="Synced"} == 1
            for: 12h
            labels:
              severity: warning
            annotations:
              summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
              description: >
                The application [{{`{{$labels.name}}`}} has not been synchronized for over
                12 hours which means that the state of this cloud has drifted away from the
                state inside Git.
    persistence:
      enabled: true
      storageClass: local-path

  dex:
    enabled: false

  server:
    replicas: 2
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-server
            topologyKey: kubernetes.io/hostname

    configEnabled: true
    extraArgs:
      - --insecure # Run server without TLS
    config:
      admin:
        enabled: "true"
        globalprojects: ""
      url: https://argocd.local.eryx.pro
      application.instanceLabelKey: argocd.argoproj.io/instance
      web.secure: "true"
      # Add CORS configuration
      ui:
        bannercontent: ""
        bannerpermanent: "false"
      ga:
        trackingid: ""
      exec:
        enabled: "false"
      rbac:
        log:
          enforce:
            enable: "false"
      cors:
        enable: "true"
        allowOrigins: "*"
        allowCredentials: "true"
      statusbadge.enabled: "true"
      resource.compareoptions: |
        ignoreAggregatedRoles: true
      resource.customizations: |
        admissionregistration.k8s.io/MutatingWebhookConfiguration:
          ignoreDifferences: |
            jsonPointers:
              - /webhooks/0/clientConfig/caBundle
        apiregistration.k8s.io/APIService:
          ignoreDifferences: |
            jsonPointers:
              - /spec/caBundle
              - /metadata/annotations
        Service:
          health.lua: |
            hs = {}
            hs.status = "Healthy"
            return hs
        networking.k8s.io/Ingress:
          health.lua: |
            hs = {}
            hs.status = "Healthy"
            return hs
        # Add CRD customization for large resources
        apiextensions.k8s.io/CustomResourceDefinition:
          ignoreDifferences: |
            jsonPointers:
              - /metadata/annotations

    configs:
      params:
        # Enable server-side apply globally
        server.default.server.side.apply: true
        # Increase resource limits
        resource.limits.memory: "2048Mi"
        # Add timeout for applying resources
        timeout.reconciliation: "180s"

    ingress:
      enabled: false
      ingressClassName: traefik
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.priority: "10"
        cert-manager.io/cluster-issuer: le-production
      hosts:
        - argocd.local.eryx.pro
      tls:
        - secretName: eryx-pro-tls
          hosts: [argocd.local.eryx.pro]
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    

  repoServer:
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 10
      targetCPUUtilizationPercentage: 75
      targetMemoryUtilizationPercentage: 75
    # Add resource limits for repo server
    resources:
      limits:
        memory: "2048Mi"
        cpu: "1000m"
      requests:
        memory: "512Mi"
        cpu: "250m"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

  applicationSet:
    enabled: true
    fullnameOverride: applicationset-controller
    args:
      policy: create-update
  redis:
    enabled: true
    ha:
      enabled: true
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-redis
            topologyKey: kubernetes.io/hostname